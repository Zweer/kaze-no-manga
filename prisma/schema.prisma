// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  MangaList   MangaList[]
  ReadChapter ReadChapter[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken  String   @unique
  userId        String
  expires       DateTime

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier  String
  token       String
  expires     DateTime

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID          String  @unique
  userId                String
  providerAccountId     String
  credentialPublicKey   String
  counter               Int
  credentialDeviceType  String
  credentialBackedUp    Boolean
  transports            String?

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model MangaList {
  id        String  @id @default(cuid())
  userId    String
  name      String
  isPublic  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User            @relation(fields: [userId], references: [id])
  mangas MangaListItem[]

  @@unique([userId, name])
}

model MangaListItem {
  id          String @id @default(cuid())
  mangaListId String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  mangaList MangaList @relation(fields: [mangaListId], references: [id], onDelete: Cascade)
  manga     Manga     @relation(fields: [id], references: [id], onDelete: Cascade)
}

model ReadChapter {
  id        String @id @default(cuid())
  userId    String
  mangaId   String
  chapterId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, mangaId, chapterId])
}

model Manga {
  id            String  @id
  title         String
  coverImageUrl String
  description   String?
  source        String // To store which connector the manga came from (e.g., "mangaDex", "myAnimeList")

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  chapters  Chapter[]
  listItems MangaListItem[]

  @@index([source, id]) // Composite index for efficient querying
}

model Chapter {
  id            String   @id
  mangaId       String
  title         String
  chapterNumber String
  pages         String[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  manga  Manga         @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  readBy ReadChapter[]

  @@index([mangaId, chapterNumber]) // Composite index for efficient querying
}
