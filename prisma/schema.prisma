// prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

// Auth.js Models (adapted from @auth/prisma-adapter)
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  username       String?   @unique // For profile URLs
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  trackedMangas UserManga[] // Relation to the user's tracked mangas
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

// Application Models

enum MangaStatus {
  Ongoing
  Completed
  Hiatus
  Cancelled
  Unknown
}

model Manga {
  id                    String      @id @default(uuid()) // Use uuid for app models
  sourceId              String
  sourceName            String
  slug                  String
  title                 String?
  excerpt               String?
  imageUrl              String?
  sourceUrl             String
  releasedAt            DateTime?
  status                MangaStatus @default(Unknown)
  genres                String[]
  score                 Float?
  chaptersCount         Int         @default(0)

  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  lastCheckedForUpdates DateTime?

  chapters              Chapter[]
  trackedByUsers        UserManga[]

  @@unique([sourceId, sourceName])
  @@index([lastCheckedForUpdates])
}

model Chapter {
  id         String    @id @default(uuid())
  mangaId    String
  sourceId   String
  sourceName String
  slug       String
  name       String
  title      String?
  index      Float
  sourceUrl  String    @unique
  releasedAt DateTime?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  manga Manga @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  readByUsers UserManga[]

  @@unique([mangaId, sourceId, sourceName])
  @@index([mangaId])
  @@index([releasedAt])
}

model UserManga {
  userId            String
  mangaId           String
  lastReadChapterId String?
  lastReadAt        DateTime?
  isFavourite       Boolean   @default(false)
  hasNewChapter     Boolean   @default(false)
  addedAt           DateTime  @default(now())

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  manga             Manga     @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  lastReadChapter   Chapter?  @relation(fields: [lastReadChapterId], references: [id], onDelete: SetNull) // Link to last read chapter

  @@id([userId, mangaId])
  @@index([userId])
  @@index([mangaId])
  @@index([userId, hasNewChapter])
}
